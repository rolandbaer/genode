#
# Build
#

#
# The size of the result buffers in the fast-time-polling test
#
proc fast_polling_buf_size  { } {

	if {[expr [have_board pbxa9]        && [have_spec foc]]} { return 40000000 }
	if {[expr [have_board imx53_qsb_tz] && [have_spec hw]]}  { return 40000000 }
	if {[expr [have_board rpi]          && [have_spec hw]]}  { return 40000000 }
	if {[expr [have_board virt_qemu_riscv]   && [have_spec hw]]}  { return 15000000 }
	return 80000000
}

#
# Wether the platform allows for timeouts that trigger with a precision < 50 milliseconds
#
proc precise_timeouts { } { return true }

#
# Wether the platform allows for a timestamp that has a precision < 1 millisecond
#
proc precise_time { } { return true }

#
# Wether the platform allows for a 'Timer::Connection::elapsed_ms'
# implementation that has a precision < 2 ms
#
proc precise_ref_time { } { return true }

build { core init lib/ld driver/platform timer/hpet test/timeout app/top server/report_rom driver/acpi}

#
# Boot image
#

create_boot_directory

install_config {
	<config prio_levels="4">
		<parent-provides>
			<service name="ROM"/>
			<service name="IRQ"/>
			<service name="IO_MEM"/>
			<service name="IO_PORT"/>
			<service name="PD"/>
			<service name="RM"/>
			<service name="CPU"/>
			<service name="LOG"/>
			<service name="TRACE"/>
		</parent-provides>
		<default-route>
			<any-service><parent/><any-child/></any-service>
		</default-route>
		<default caps="100"/>
		<start name="hpet_timer" ram="10M">
			<provides><service name="Timer"/></provides>
		</start>
		<start name="test" ram="250M" priority="-1">
			<binary name="test-timeout"/>
			<config precise_time="} [precise_time] {"
			        precise_ref_time="} [precise_ref_time] {"
			        precise_timeouts="} [precise_timeouts] {"
			        fast_polling_buf_size="} [fast_polling_buf_size] {"/>
		</start>
<!--
		<start name="top" ram="20M" priority="-2">
			<route>
				<service name="TRACE"> <parent label=""/> </service>
				<any-service><parent/><any-child/></any-service>
			</route>
		</start>
-->

		<start name="drivers_reports" caps="100" ram="2M">
			<binary name="report_rom"/>
			<provides>
				<service name="Report"/>
				<service name="ROM"/>
			</provides>
			<config verbose="no">
				<policy label="pci_decode -> system" report="acpi -> acpi"/>
				<policy label="platform -> devices"  report="pci_decode -> devices"/>
				<policy label="usb_hid -> report"    report="usb -> devices"/>
			</config>
		</start>

		<start name="acpi" caps="350" ram="4M">
			<route>
				<service name="Report"> <child name="drivers_reports"/> </service>
				<any-service> <parent/> <any-child/> </any-service>
			</route>
		</start>
	</config>
}

build_boot_image [build_artifacts]

#
# Execution
#

append qemu_args "-nographic "

run_genode_until forever
run_genode_until "child \"test\" exited with exit value.*\n" 900
grep_output {\[init\] child "test" exited with exit value}
compare_output_to {[init] child "test" exited with exit value 0}
